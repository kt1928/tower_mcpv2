# .gitignore
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# Environment variables
.env
.env.local
.env.development.local
.env.test.local
.env.production.local

# PyInstaller
*.manifest
*.spec

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
.python-version

# pipenv
Pipfile.lock

# poetry
poetry.lock

# celery beat schedule file
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# IDE
.vscode/
.idea/
*.swp
*.swo
*~

# OS
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Project specific
data/
logs/
config/config.json
*.log
*.sqlite
*.db

# Docker
.dockerignore

---

# .dockerignore
.git
.gitignore
README.md
LICENSE
.env*
docker-compose.yml
.github/
tests/
docs/
*.md
.vscode/
.idea/
__pycache__/
*.pyc
*.pyo
*.pyd
.Python
.pytest_cache/
.coverage
.mypy_cache/
.DS_Store
Thumbs.db

---

# .env.example
# Unraid MCP Server Configuration

# Basic Settings
LOG_LEVEL=INFO
TZ=America/New_York
UNRAID_HOST=unraid.local

# MCP Server
MCP_PORT=8080
ENABLE_AUTH=false
API_KEY=

# Tool Configuration
ENABLE_SYSTEM_DIAGNOSTICS=true
ENABLE_DOCKER_MANAGEMENT=true
ENABLE_PLEX_INTEGRATION=true
ENABLE_LOG_ANALYSIS=true
ENABLE_MAINTENANCE=true

# Plex Integration (Optional)
PLEX_URL=http://plex:32400
PLEX_TOKEN=

# Performance Settings
MAX_WORKERS=4
CACHE_TTL=300
HEALTH_CHECK_INTERVAL=60
CLEANUP_INTERVAL=3600

# Database (Production)
DATABASE_URL=sqlite:///app/data/unraid_mcp.db
POSTGRES_PASSWORD=changeme

---

# LICENSE
MIT License

Copyright (c) 2025 Unraid MCP Server Contributors

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

---

# scripts/init_config.py
#!/usr/bin/env python3
"""
Initialize configuration for Unraid MCP Server
"""

import os
import json
import logging
from pathlib import Path


def create_default_config():
    """Create default configuration if it doesn't exist"""
    config_dir = Path("/app/config")
    config_file = config_dir / "default_config.json"
    
    if config_file.exists():
        print("Default configuration already exists")
        return
    
    default_config = {
        "server": {
            "host": "0.0.0.0",
            "port": int(os.getenv("MCP_PORT", "8080")),
            "workers": int(os.getenv("MAX_WORKERS", "4")),
            "enable_auth": os.getenv("ENABLE_AUTH", "false").lower() == "true",
            "api_key": os.getenv("API_KEY")
        },
        "logging": {
            "level": os.getenv("LOG_LEVEL", "INFO"),
            "format": "%(asctime)s - %(name)s - %(levelname)s - %(message)s",
            "file": "/app/logs/unraid-mcp-server.log",
            "max_size": "10MB",
            "backup_count": 5
        },
        "tools": {
            "system_diagnostics": {
                "enabled": os.getenv("ENABLE_SYSTEM_DIAGNOSTICS", "true").lower() == "true",
                "cache_ttl": 60,
                "temperature_unit": "celsius"
            },
            "docker_management": {
                "enabled": os.getenv("ENABLE_DOCKER_MANAGEMENT", "true").lower() == "true",
                "socket_path": "/var/run/docker.sock",
                "auto_cleanup": False
            },
            "plex_integration": {
                "enabled": os.getenv("ENABLE_PLEX_INTEGRATION", "true").lower() == "true",
                "url": os.getenv("PLEX_URL"),
                "token": os.getenv("PLEX_TOKEN"),
                "timeout": 30
            },
            "log_analysis": {
                "enabled": os.getenv("ENABLE_LOG_ANALYSIS", "true").lower() == "true",
                "watch_paths": [
                    "/host/var/log/syslog",
                    "/host/var/log/messages"
                ],
                "max_lines": 1000
            },
            "maintenance": {
                "enabled": os.getenv("ENABLE_MAINTENANCE", "true").lower() == "true",
                "cleanup_interval": int(os.getenv("CLEANUP_INTERVAL", "3600"))
            }
        },
        "unraid": {
            "host": os.getenv("UNRAID_HOST", "unraid.local"),
            "paths": {
                "boot": "/host/boot",
                "proc": "/host/proc",
                "sys": "/host/sys",
                "var_log": "/host/var/log"
            }
        }
    }
    
    config_dir.mkdir(parents=True, exist_ok=True)
    
    with open(config_file, 'w') as f:
        json.dump(default_config, f, indent=2)
    
    print(f"Created default configuration: {config_file}")


def ensure_directories():
    """Ensure required directories exist"""
    directories = [
        "/app/data",
        "/app/logs", 
        "/app/config",
        "/app/data/cache",
        "/app/data/databases"
    ]
    
    for directory in directories:
        Path(directory).mkdir(parents=True, exist_ok=True)
        print(f"Ensured directory exists: {directory}")


def main():
    """Main initialization function"""
    print("Initializing Unraid MCP Server configuration...")
    
    try:
        ensure_directories()
        create_default_config()
        print("Configuration initialization complete!")
        return 0
    except Exception as e:
        print(f"Configuration initialization failed: {e}")
        return 1


if __name__ == "__main__":
    import sys
    sys.exit(main())